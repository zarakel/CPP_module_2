#include <string>
#include <iomanip>
#include "Fixed.hpp"
#include <cmath>

Fixed::Fixed( void )
{
	std::cout << "Default constructor Called" << std::endl;
	this->_stock = 0;
	return;
}

Fixed::Fixed( int const i )
{
	std::cout << "Int constructor called" << std::endl;
	this->_stock = i << this->_cstock;
	return;
}

Fixed::Fixed( float const f )
{
	std::cout << "Float constructor called" << std::endl;
	this->_stock = roundf(f  * ( 1 << this->_cstock ) );
	std::cout << this->_stock << std::endl;
	return;
}


Fixed::Fixed( Fixed const & cp )
{
	std::cout << "Copy constructor Called" << std::endl;
	*this = cp;
	return;
}

Fixed::~Fixed( void )
{
	std::cout << "Destuctor Called" << std::endl;
	return;
}

Fixed & Fixed::operator=(Fixed const & bambi)
{
	std::cout << "Copy assignement operator Called" << std::endl;
	this->_stock = bambi.getRawBits();
	return *this;
}

Fixed  Fixed::++operator( void ) const
{
	std::cout << "Pré-Incrementation operator Called" << std::endl;
	this->_stock += 0.00390625;
	return Fixed( roundf(this->_stock) );
}

Fixed  Fixed::operator++( int ) const
{
	int swap;
	std::cout << "Post-Incrementation operator Called" << std::endl;
	swap = this->_stock;
	this->_stock += 0.00390625;
	return Fixed( roundf(swap) );
}

Fixed  Fixed::--operator( void ) const
{
	std::cout << "Pré-Decrementation operator Called" << std::endl;
	this->_stock -= 0.00390625;
	return Fixed( roundf(this->_stock) );
}

Fixed  Fixed::operator--( int ) const
{
	int swap;
	std::cout << "Post-Decrementation operator Called" << std::endl;
	swap = this->_stock;
	this->_stock -= 0.00390625;
	return Fixed( roundf(swap) );
}

Fixed  Fixed::operator+(Fixed const & bambi) const
{
	std::cout << "Addition assignement operator Called" << std::endl;
	return Fixed( this->_stock + bambi.getRawBits() );
}

Fixed  Fixed::operator-(Fixed const & bambi) const
{
	std::cout << "Soustraction assignement operator Called" << std::endl;
	return Fixed( this->_stock - bambi.getRawBits() );
}

Fixed  Fixed::operator*(Fixed const & bambi) const
{
	std::cout << "Times assignement operator Called" << std::endl;
	return Fixed( this->_stock * bambi.getRawBits() );
}

Fixed  Fixed::operator/(Fixed const & bambi) const
{
	std::cout << "Division assignement operator Called" << std::endl;
	return Fixed( this->_stock / bambi.getRawBits() );
}

Fixed  Fixed::operator<(Fixed const & bambi) const
{
	std::cout << "Lower than operator Called" << std::endl;
	if (this->_stock < bambi.getRawBits())
		return 1;
	return 0;
}

Fixed  Fixed::operator>(Fixed const & bambi) const
{
	std::cout << "Bigger than operator Called" << std::endl;
	if (this->_stock > bambi.getRawBits())
		return 1;
	return 0;
}

Fixed  Fixed::operator>=(Fixed const & bambi) const
{
	std::cout << "Bigger or equal than operator Called" << std::endl;
	if (this->_stock >= bambi.getRawBits())
		return 1;
	return 0;
}

Fixed  Fixed::operator<=(Fixed const & bambi) const
{
	std::cout << "Lower or equal than operator Called" << std::endl;
	if (this->_stock <= bambi.getRawBits())
		return 1;
	return 0;
}

Fixed  Fixed::operator==(Fixed const & bambi) const
{
	std::cout << "Both equals than operator Called" << std::endl;
	if (this->_stock == bambi.getRawBits())
		return 1;
	return 0;
}

Fixed  Fixed::operator!=(Fixed const & bambi) const
{
	std::cout << "Both equals than operator Called" << std::endl;
	if (this->_stock != bambi.getRawBits())
		return 1;
	return 0;
}

std::ostream & operator<<( std::ostream & os, Fixed const & mo )
{
	os << mo.toFloat();
	return os;
}

int	Fixed::getRawBits( void ) const
{
	std::cout << "GetRawBits member function Called" << std::endl;
	return(this->_stock);
}

void	Fixed::setRawBits( int const raw )
{
	this->_stock = raw;
}

int	Fixed::toInt( void ) const
{
	return ( (int)this->_stock >> this->_cstock );
}


float	Fixed::toFloat( void ) const
{
	return ( (float)this->_stock / ( 1 << this->_cstock ) );
}

Fixed	Fixed::MinFixed( Fixed B )
{
	if (*this <= B)
		return *this;
	else
	return B;
}

Fixed const	Fixed::MinFixed( Fixed const B )
{
	if (*this (const) <= B)
		return *this;
	else
	return B;
}

Fixed	Fixed::MaxFixed( Fixed B )
{
	if (*this >= B)
		return *this;
	else
	return B;
}

Fixed const	Fixed::MaxFixed( Fixed const B )
{
	if (*this (const) >= B)
		return *this;
	else
	return B;
}

int const Fixed::_cstock = 8;
